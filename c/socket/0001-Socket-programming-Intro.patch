From 07cef5aa4d59e56875792ad3e4e1ef3f4a4d929a Mon Sep 17 00:00:00 2001
From: Balaji Eswaramoorthi <balaji.eswaramurthy@qubercomm.com>
Date: Sun, 26 Jan 2020 18:42:25 +0530
Subject: [PATCH] Socket programming Intro

---
 c/socket/example_1.c | 50 ++++++++++++++++++++++++++++++++++++++++++
 c/socket/example_2.c | 50 ++++++++++++++++++++++++++++++++++++++++++
 c/socket/socket.txt  | 52 ++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 152 insertions(+)
 create mode 100644 c/socket/example_1.c
 create mode 100644 c/socket/example_2.c
 create mode 100644 c/socket/socket.txt

diff --git a/c/socket/example_1.c b/c/socket/example_1.c
new file mode 100644
index 0000000..1e5e4e0
--- /dev/null
+++ b/c/socket/example_1.c
@@ -0,0 +1,50 @@
+/*
+ * Here’s an example of a very simple socket client program, client1.c.
+ * It creates an unnamed socket and connects it to a server socket called
+ * server_socket. We cover the details of the socket system call a
+ * little later, after we’ve discussed some addressing issues.
+ */
+
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <unistd.h>
+#include <stdlib.h>
+
+int main(void)
+{
+	int sockfd, len;
+	struct sockaddr_un address;
+	int result;
+	char ch = 'a';
+
+	// Create a socket for the client
+	sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
+
+	// Name the socket as agreed with the server
+	address.sun_family = AF_UNIX;
+	strcpy(address.sun_path, "server_socket");
+	len = sizeof(address);
+
+	// Connect your socket to  the server's socket
+	result = connect(sockfd, (struct sockaddr *)&address, len);
+
+	if (result == -1) {
+		perror("oops: client");
+		exit(1);
+	}
+
+	// You can now read and read write via sockfd
+	
+	write(sockfd, &ch, 1);
+	read(sockfd, &ch, 1);
+	printf("char from server = %c\n", ch);
+	close(sockfd);
+	exit(0);
+	/*
+	 * This program fails when you run it because you haven't yet created the
+	 * server-side named socket. (The exact error message may differ from
+	 * system to system)
+	 */
+}
diff --git a/c/socket/example_2.c b/c/socket/example_2.c
new file mode 100644
index 0000000..bbeab1e
--- /dev/null
+++ b/c/socket/example_2.c
@@ -0,0 +1,50 @@
+/*
+ * Here’s a very simple server program, that accepts connections
+ * from the client. It creates theserver socket, binds it to a name, creates
+ * a listen queue, and accepts connections.
+ */
+
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <stdio.h>
+#include <sys/un.h>
+#include <unistd.h>
+#include <stdlib.h>
+
+int main(void)
+{
+	int server_sockfd, client_sockfd;
+	int server_len, client_len;
+	struct sockaddr_un server_address;
+	struct sockaddr_un client_address;
+
+	// Remove any old sockets and create an unnamed socket for the server
+	unlink("server_socket");
+	server_sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
+
+	// Name the socket
+	server_address.sun_family = AF_UNIX;
+	strcpy(server_address.sun_path, "server_socket");
+	server_len = sizeof(server_address);
+	bind(server_sockfd, (struct sockaddr *)&server_address, server_len);
+
+	// Create a connection queue and wait for clients
+	listen(server_sockfd, 5);
+	
+	while(1) {
+		char ch;
+		printf("server waiting\n");
+
+		// Accept a connection
+		client_len = sizeof(client_address);
+		client_sockfd = accept(server_sockfd,
+				       (struct sockaddr *)&client_address,
+				       &client_len);
+
+		// Read and write to client on client_sockfd
+		read(client_sockfd, &ch, 1);
+		ch++;
+		write(client_sockfd, &ch, 1);
+		close(client_sockfd);
+	}
+}
diff --git a/c/socket/socket.txt b/c/socket/socket.txt
new file mode 100644
index 0000000..9964853
--- /dev/null
+++ b/c/socket/socket.txt
@@ -0,0 +1,52 @@
+What Is a Socket?
+
+	A socket is a communication mechanism that allows client/server systems to be developed either locally,
+on a single machine, or across networks. Linux functions such as printing, connecting to databases, and
+serving web pages as well as network utilities such as rlogin for remote login and ftp for file transfer
+usually use sockets to communicate.
+
+	Sockets are created and used differently from pipes because they make a clear distinction between client
+and server. The socket mechanism can implement multiple clients attached to a single server.
+
+Socket Connections
+	You can think of socket connections as telephone calls into a busy building. A call comes into an organization
+and is answered by a receptionist who puts the call through to the correct department (the server process)
+and from there to the right person (the server socket). Each incoming call (client) is routed to an
+appropriate end point and the intervening operators are free to deal with further calls. Before you look at
+the way socket connections are established in Linux systems, you need to understand how they operate
+for socket applications that maintain a connection.
+
+	First, a server application creates a socket, which like a file descriptor is a resource assigned to the server
+process and that process alone. The server creates it using the system call socket, and it can’t be shared
+with other processes.
+
+	Next, the server process gives the socket a name. Local sockets are given a filename in the Linux file system,
+often to be found in /tmp or /usr/tmp. For network sockets, the filename will be a service identifier
+(port number/access point) relevant to the particular network to which the clients can connect. This
+identifier allows Linux to route incoming connections specifying a particular port number to the correct server process.
+For example, a web server typically creates a socket on port 80, an identifier reserved for the purpose. Web browsers know
+to use port 80 for their HTTP connections to web sites the user wants to read. A socket is named using the system call bind.
+The server process then waits for a client to connect to the named socket. The system call, listen, creates a queue for
+incoming connections. The server can accept them using the system call accept. When the server calls accept, a new socket
+is created that is distinct from the named socket. This new socket is used solely for communication with this particular
+client. The named socket remains for further connections from other clients. If the server is written appropriately,
+it can take advantage of multiple connections. A web server will do this so that it can serve pages to many clients at once.
+For a simple server, further clients wait on the listen queue until the server is ready again.
+
+	The client side of a socket-based system is more straightforward. The client creates an unnamed socket
+by calling socket. It then calls connect to establish a connection with the server by using the server’s named socket as an address.
+Once established, sockets can be used like low-level file descriptors, providing two-way data communications.
+
+Client example program is in example_1.c.
+
+	This program fails when you run it because you haven’t yet created the server-side named socket. (The
+exact error message may differ from system to system.)
+
+A simple load server program is in example_2.c
+
+How It Works
+
+	The server program in this example can serve only one client at a time. It just reads a character from the
+client, increments it, and writes it back. In more sophisticated systems, where the server has to perform
+more work on the client’s behalf, this wouldn’t be acceptable, because other clients would be unable to
+connect until the server had finished. You’ll see a couple of ways to allow multiple connections later.
-- 
2.17.1

